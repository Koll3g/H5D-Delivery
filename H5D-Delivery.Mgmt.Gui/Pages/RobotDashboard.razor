@page "/robotDashboard"
@using H5D_Delivery.Mgmt.Backend.Robot.Domain
@using H5D_Delivery.Mgmt.Backend.Shared.IoC
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain
@using H5D_Delivery.Mgmt.Backend.Order.Domain
@using H5D_Delivery.Mgmt.Backend.Product.Domain
@using H5D_Delivery.Mgmt.Backend.Robot.Comm
@using Autofac
@using System.ComponentModel
@using H5D_Delivery.Mgmt.Backend.Customer.Domain
@using H5D_Delivery.Mgmt.Backend.Delivery.Comm
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain.DeliveryOrderFactory
@using H5D_Delivery.Mgmt.Backend.Stock.Domain
@using Microsoft.VisualBasic

<h3>Robots</h3>
<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>BatteryCharge</th>
        <th>GiveMeAnOrder</th>
        <th>CurrentDeliveryId</th>
        <th>CurrentDeliveryStep</th>
        <th>DeliveryDone</th>
        <th>CurrentPosition</th>
        <th>ErrorMessage</th>
        <th>Actions</th>
        <th>LastContact</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var robot in _robots)
    {
        <tr>
            <td>@robot.Id</td>
            <td>
                <input type="text" @bind="robot.Name"/>
                <button @onclick="robot.UpdateDb">Save</button>
            </td>
            <td>@robot.BatteryCharge?.BatteryChargePct %</td>
            <td>@robot.GiveMeAnOrder</td>
            <td>@robot.CurrentDeliveryId</td>
            <td>@robot.CurrentDeliveryStep</td>
            <td>@robot.DeliveryDone</td>
            <td>@robot.CurrentPosition</td>
            <td>@robot.ErrorMessage</td>
            <td>
                <button @onclick="robot.RequestStatusUpdate">RequestStatusUpdate</button>
                <button @onclick="robot.RequestReturnToBase">RequestReturnToBase</button>
                <button @onclick="() => robot.GiveDeliveryOrder(MakeTestDeliveryOrder2())">SendDeliveryOrder</button>
                <button @onclick="() => robot.VisualizePosition = !robot.VisualizePosition">@GetButtonText(robot.VisualizePosition)</button>
            </td>
            <td>@robot.LastContact</td>
        </tr>
    }
    </tbody>
</table>
@if (_robots.Any(r => r.VisualizePosition))
{
    <div id="map" style="position: relative; width: 940px; height: 500px; border: 1px solid black; overflow: visible;">
        <div style="position: absolute; left: 0px; top: 200px; width: 140px; height: 200px; background-color: lightgray; border: 1px solid black">
            <p>Verteilzentrum</p>
        </div>
        <div style="position: absolute; left: 200px; top: 0px; width: 180px; height: 200px; background-color: lightgray; border: 1px solid black">
            <p>Kunde 1</p>
        </div>
        <div style="position: absolute; left: 380px; top: 0px; width: 180px; height: 200px; background-color:lightgray; border: 1px solid black">
            <p>Kunde 2</p>
        </div>
        <div style="position: absolute; left: 560px; top: 0px; width: 180px; height: 200px; background-color:lightgray; border: 1px solid black">
            <p>Kunde 3</p>
        </div>
        <div style="position: absolute; left: 800px; top: 200px; width: 140px; height: 200px; background-color: lightgray; border: 1px solid black">
            <p>Kunde 4</p>
        </div>
        <div style="position: absolute; left: 0px; top: 400px; width: 140px; height: 80px; background-color: lightgray; border: 1px solid black">
            <p>Parkposition</p>
        </div>
        @foreach (var robot in _robots)
        {
            if (robot.VisualizePosition)
            {
                <div style="position: absolute; left: @(robot.CurrentPosition.X/5+50)px; top: @(-1*robot.CurrentPosition.Y/5+300+10)px; height: 20px; background-color: lightblue; border-radius: 5px">• @robot.Name</div>
            }
        }
    </div>
}

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        grid-gap: 10px;
        width: 940px;
        height: 500px;
        border: 1px solid black;
        overflow: visible;
    }

    .grid-item {
        position: relative;
        background-color: lightgray;
        border: 1px solid black;
        border-radius: 5px;
        padding: 5px;
    }
</style>

@code {
    private IEnumerable<Robot> _robots;
    private readonly RobotListener _robotListener;


    public RobotDashboard()
    {
        _robotListener = IocSetup.Instance.Container.Resolve<RobotListener>();
        _robots = _robotListener.ActiveRobots;

        PropertyChangedSubscription();
        RequestUpdatesForAllRobots();
    }

    private string GetButtonText(bool visualizePosition)
    {
        return visualizePosition ? "Hide on Map" : "Show on Map";
    }

    private void RequestUpdatesForAllRobots()
    {
        foreach (var robot in _robots)
        {
            robot.RequestStatusUpdate();
        }
    }

    //TESTING ONLY
    //private DeliveryOrderDto MakeTestDeliveryOrder()
    //{
    //    var testDeliveryOrder = new DeliveryOrder(Guid.NewGuid());
    //    testDeliveryOrder.Orders = new List<Order>();
    //    var stockItems = new List<StockItem>();

    //    var product = new Product(Guid.NewGuid(), "Messer");
    //    var stockItem = new StockItem(Guid.NewGuid(), product, 50, StorageLocation.A1);
    //    stockItems.Add(stockItem);

    //    var product2 = new Product(Guid.NewGuid(), "Gabel");
    //    var stockItem2 = new StockItem(Guid.NewGuid(), product2, 50, StorageLocation.A2);
    //    stockItems.Add(stockItem2);

    //    var customer = new Customer(Guid.NewGuid(), "Hans", "Zbw-Strasse 4", "hans@gmail.com", "123456");
    //    var customer2 = new Customer(Guid.NewGuid(), "Max", "Zbw-Strasse 3", "max@gmail.com", "123456");

    //    var order = new Order(Guid.NewGuid(), product, customer, 1, new DateTime(2023, 07, 20, 12, 0, 0), new DateTime(2023, 07, 20, 13, 0, 0), Priority.Normal, DeliveryType.Deposit, OrderStatus.Active);
    //    var order2 = new Order(Guid.NewGuid(), product2, customer2, 1, new DateTime(2023, 07, 20, 13, 0, 0), new DateTime(2023, 07, 20, 14, 0, 0), Priority.Normal, DeliveryType.HandOver, OrderStatus.Active);

    //    testDeliveryOrder.Orders.Add(order);
    //    testDeliveryOrder.Orders.Add(order2);

    //    testDeliveryOrder.DeliveryPlan = new DeliveryPlan(Guid.NewGuid());
    //    testDeliveryOrder.DeliveryPlan.DeliverySteps = new List<DeliveryStep>();

    //    var deliveryStep1 = new DeliveryStep(Guid.NewGuid());
    //    deliveryStep1.Coordinates = new Coordinates(500, 500);
    //    deliveryStep1.StepSequence = 1;
    //    deliveryStep1.DeliveryType = DeliveryType.Waypoint;
    //    testDeliveryOrder.DeliveryPlan.DeliverySteps.Add(deliveryStep1);

    //    var deliveryStep2 = new DeliveryStep(Guid.NewGuid());
    //    deliveryStep2.Coordinates = new Coordinates(1000, 2000);
    //    deliveryStep2.ProductId = product.Id;
    //    deliveryStep2.AuthorizationKey = "aefawef";
    //    deliveryStep2.StepSequence = 2;
    //    deliveryStep2.DeliveryType = DeliveryType.Deposit;
    //    testDeliveryOrder.DeliveryPlan.DeliverySteps.Add(deliveryStep2);

    //    var deliveryStep3 = new DeliveryStep(Guid.NewGuid());
    //    deliveryStep3.Coordinates = new Coordinates(2000, 3000);
    //    deliveryStep3.StepSequence = 3;
    //    deliveryStep3.DeliveryType = DeliveryType.Waypoint;
    //    testDeliveryOrder.DeliveryPlan.DeliverySteps.Add(deliveryStep3);

    //    var deliveryStep4 = new DeliveryStep(Guid.NewGuid());
    //    deliveryStep4.Coordinates = new Coordinates(3000, 4000);
    //    deliveryStep4.ProductId = product2.Id;
    //    deliveryStep4.AuthorizationKey = "awef123";
    //    deliveryStep4.StepSequence = 4;
    //    deliveryStep4.DeliveryType = DeliveryType.HandOver;
    //    testDeliveryOrder.DeliveryPlan.DeliverySteps.Add(deliveryStep4);

    //    return new DeliveryOrderDto(testDeliveryOrder, stockItems);
    //}

    private DeliveryOrderDto MakeTestDeliveryOrder2()
    {
        var orders = IocSetup.Instance.Container.Resolve<OrderService>().GetAll().ToList();
        var deliveryOrder = IocSetup.Instance.Container.Resolve<DeliveryOrderFactory>().GenerateDeliveryOrder(orders);
        var stockItems = IocSetup.Instance.Container.Resolve<StockService>().GetAll().ToList();
        return new DeliveryOrderDto(deliveryOrder, stockItems);
    }

    private void PropertyChangedSubscription()
    {
        //ugly workaround
        foreach (var robot in _robots)
        {
            robot.PropertyChanged += PropertyHasChanged;
        }
    }

    private void PropertyHasChanged(object? x, PropertyChangedEventArgs y)
    {
        //ugly workaround
        InvokeAsync(StateHasChanged);
    }

}
