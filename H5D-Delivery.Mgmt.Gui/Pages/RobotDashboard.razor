@page "/robotDashboard"
@using H5D_Delivery.Mgmt.Backend.Robot.Domain
@using H5D_Delivery.Mgmt.Backend.Shared.IoC
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain
@using H5D_Delivery.Mgmt.Backend.Order.Domain
@using H5D_Delivery.Mgmt.Backend.Product.Domain
@using H5D_Delivery.Mgmt.Backend.Robot.Comm
@using Autofac
@using System.ComponentModel
@using H5D_Delivery.Mgmt.Backend.Customer.Domain

<h3>Robots</h3>
<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>BatteryCharge</th>
        <th>GiveMeAnOrder</th>
        <th>CurrentDeliveryId</th>
        <th>CurrentDeliveryStep</th>
        <th>DeliveryDone</th>
        <th>ErrorMessage</th>
        <th>Actions</th>
        <th>LastContact</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var robot in _robots)
    {
        <tr>
            <td>@robot.Id</td>
            <td>
                <input type="text" @bind="robot.Name"/>
                <button @onclick="robot.UpdateDb">Save</button>
            </td>
            <td>@robot.BatteryCharge?.BatteryChargePct %</td>
            <td>@robot.GiveMeAnOrder</td>
            <td>@robot.CurrentDeliveryId</td>
            <td>@robot.CurrentDeliveryStep</td>
            <td>@robot.DeliveryDone</td>
            <td>@robot.ErrorMessage</td>
            <td>
                <button @onclick="robot.RequestStatusUpdate">RequestStatusUpdate</button>
                <button @onclick="robot.RequestReturnToBase">RequestReturnToBase</button>
                <button @onclick="() => robot.GiveDeliveryOrder(_testDeliveryOrder)">SendDeliveryOrder</button>
            </td>
            <td>@robot.LastContact</td>
        </tr>
    }
    </tbody>
</table>

@code {
    private IEnumerable<Robot> _robots;
    private readonly RobotListener _robotListener;

    private readonly DeliveryOrder _testDeliveryOrder;

    public RobotDashboard()
    {
        _robotListener = IocSetup.Instance.Container.Resolve<RobotListener>();
        _robots = _robotListener.ActiveRobots;
        
        _testDeliveryOrder = new DeliveryOrder(Guid.NewGuid());
        MakeTestDeliveryOrder();

        PropertyChangedSubscription();
        RequestUpdatesForAllRobots();
    }

    private void RequestUpdatesForAllRobots()
    {
        foreach (var robot in _robots)
        {
            robot.RequestStatusUpdate();
        }
    }

    //TESTING ONLY
    private void MakeTestDeliveryOrder()
    {
        _testDeliveryOrder.Orders = new List<Order>();

        var product = new Product(Guid.NewGuid(), "Messer");
        var customer = new Customer(Guid.NewGuid(), "Hans", "Zbw-Strasse 4", "hans@gmail.com", "123456");
        var order = new Order(Guid.NewGuid(), product, customer, 1, new DateTime(2023, 07, 20, 12, 0, 0), new DateTime(2023, 07, 20, 13, 0, 0), Priority.Normal, DeliveryType.Deposit, OrderStatus.Active);

        _testDeliveryOrder.Orders.Add(order);
        _testDeliveryOrder.DeliveryPlan = new DeliveryPlan(Guid.NewGuid());
        _testDeliveryOrder.DeliveryPlan.DeliverySteps = new List<DeliveryStep>();

        var deliveryStep = new DeliveryStep(Guid.NewGuid());
        deliveryStep.Coordinates = new Coordinates(1, 2);
        deliveryStep.ProductId = product.Id;
        deliveryStep.AuthorizationKey = "aefawef";
        deliveryStep.StepSequence = 1;
        deliveryStep.DeliveryType = DeliveryType.Deposit;

        _testDeliveryOrder.DeliveryPlan.DeliverySteps.Add(deliveryStep);

        var deliveryStep2 = new DeliveryStep(Guid.NewGuid());
        deliveryStep2.Coordinates = new Coordinates(3, 4);
        deliveryStep2.ProductId = Guid.NewGuid();
        deliveryStep2.AuthorizationKey = "awef123";
        deliveryStep2.StepSequence = 2;
        deliveryStep2.DeliveryType = DeliveryType.HandOver;

        _testDeliveryOrder.DeliveryPlan.DeliverySteps.Add(deliveryStep2);
    }

    private void PropertyChangedSubscription()
    {
        //ugly workaround
        foreach (var robot in _robots)
        {
            robot.PropertyChanged += PropertyHasChanged;
        }
    }

    private void PropertyHasChanged(object? x, PropertyChangedEventArgs y)
    {
        //ugly workaround
        InvokeAsync(StateHasChanged);
    }

}
