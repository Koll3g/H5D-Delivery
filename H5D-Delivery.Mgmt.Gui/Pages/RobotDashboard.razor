@page "/robotDashboard"
@using H5D_Delivery.Mgmt.Backend.Robot.Domain
@using H5D_Delivery.Mgmt.Backend.Shared.IoC
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain
@using H5D_Delivery.Mgmt.Backend.Order.Domain
@using H5D_Delivery.Mgmt.Backend.Product.Domain
@using H5D_Delivery.Mgmt.Backend.Robot.Comm
@using Autofac
@using System.ComponentModel
@using H5D_Delivery.Mgmt.Backend.Customer.Domain
@using H5D_Delivery.Mgmt.Backend.Delivery.Comm
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain.DeliveryOrderFactory
@using H5D_Delivery.Mgmt.Backend.Robot.Domain.Battery
@using H5D_Delivery.Mgmt.Backend.Robot.Domain.Error
@using H5D_Delivery.Mgmt.Backend.Stock.Domain
@using Microsoft.VisualBasic

<h3>Robots</h3>
<button class="btn btn-secondary" @onclick="() => InvokeAsync(StateHasChanged)">Refresh</button>
<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>BatteryCharge</th>
        <th>GiveMeAnOrder</th>
        <th>CurrentDeliveryId</th>
        <th>CurrentDeliveryStep</th>
        <th>DeliveryDone</th>
        <th>CurrentPosition</th>
        <th>ErrorMessage</th>
        <th>Actions</th>
        <th>LastContact</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var robot in _robots)
    {
        <tr>
            <td>@robot.Id</td>
            <td>
                <input type="text" @bind="robot.Name"/>
                    <button @onclick="robot.UpdateDb">Save</button>
            </td>
            <td>@robot.BatteryCharge?.BatteryChargePct %</td>
            <td>@robot.GiveMeAnOrder</td>
            <td>@robot.CurrentDeliveryId</td>
            <td>@robot.CurrentDeliveryStep</td>
            <td>@robot.DeliveryDone</td>
            <td>@robot.CurrentPosition</td>
            <td>@robot.ErrorMessage</td>
            <td>
                <button @onclick="robot.RequestStatusUpdate">StatusUpdate</button>
                <button @onclick="robot.RequestReturnToBase">ReturnToBase</button>
                @*<button class="btn btn-primary" @onclick="() => robot.GiveDeliveryOrder(MakeTestDeliveryOrder2())">SendDeliveryOrder</button>*@
                <button @onclick="() => robot.VisualizePosition = !robot.VisualizePosition">@GetButtonText(robot.VisualizePosition)</button>
                <button @onclick="() => ShowBatteryChargeHistory(robot)">BatteryHistory</button>
                    <button @onclick="() => ShowErrorHistory(robot)">ErrorHistory</button>
            </td>
            <td>@robot.LastContact</td>
        </tr>
    }
    </tbody>
</table>
@if (_robots.Any(r => r.VisualizePosition))
{
    <h4>Live Map</h4>
    <div id="map" style="position: relative; width: 940px; height: 500px; border: 1px solid black; overflow: visible;">
        <div style="position: absolute; left: 0px; top: 200px; width: 140px; height: 200px; background-color: lightgray; border: 1px solid black">
            <p>Verteilzentrum</p>
        </div>
        <div style="position: absolute; left: 200px; top: 0px; width: 180px; height: 200px; background-color: lightgray; border: 1px solid black">
            <p>Kunde 1</p>
        </div>
        <div style="position: absolute; left: 380px; top: 0px; width: 180px; height: 200px; background-color:lightgray; border: 1px solid black">
            <p>Kunde 2</p>
        </div>
        <div style="position: absolute; left: 560px; top: 0px; width: 180px; height: 200px; background-color:lightgray; border: 1px solid black">
            <p>Kunde 3</p>
        </div>
        <div style="position: absolute; left: 800px; top: 200px; width: 140px; height: 200px; background-color: lightgray; border: 1px solid black">
            <p>Kunde 4</p>
        </div>
        <div style="position: absolute; left: 0px; top: 400px; width: 140px; height: 80px; background-color: lightgray; border: 1px solid black">
            <p>Parkposition</p>
        </div>
        @foreach (var robot in _robots)
        {
            if (robot.VisualizePosition)
            {
                <div style="position: absolute; left: @(robot.CurrentPosition.X/5+50)px; top: @(-1*robot.CurrentPosition.Y/5+300+10)px; height: 20px; background-color: lightblue; border-radius: 5px">• @robot.Name</div>
            }
        }
    </div>
}

@if (_specificBatteryCharge != null)
{
    <h4>@_robotTitle</h4>
    <button class="btn btn-secondary" @onclick="() => _specificBatteryCharge = null">Hide</button>

    <table class="table">
        <thead>
        <tr>
            <th>DateTime</th>
            <th>Battery Charge [%]</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in _specificBatteryCharge)
        {
            <tr>
                <td>@item.DateTime</td>
                <td>@item.BatteryChargePct</td>
            </tr>
        }
        </tbody>
    </table>
}

@if (_specificErrorMessage != null)
{
    <h4>@_robotTitleError</h4>
    <button class="btn btn-secondary" @onclick="() => _specificErrorMessage = null">Hide</button>

    <table class="table">
        <thead>
            <tr>
                <th>DateTime</th>
                <th>ErrorType</th>
                <th>DeliveryStep</th>
                <th>DeliveryId</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _specificErrorMessage)
            {
                <tr>
                    <td>@item.DateTime</td>
                    <td>@item.ErrorType</td>
                    <td>@item.DeliveryStep</td>
                    <td>@item.DeliveryId</td>
                </tr>
            }
        </tbody>
    </table>
}

<style>
    .grid-container {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        grid-gap: 10px;
        width: 940px;
        height: 500px;
        border: 1px solid black;
        overflow: visible;
    }

    .grid-item {
        position: relative;
        background-color: lightgray;
        border: 1px solid black;
        border-radius: 5px;
        padding: 5px;
    }
</style>

@code {
    private IEnumerable<Robot> _robots;
    private readonly RobotListener _robotListener;

    private IEnumerable<BatteryCharge>? _specificBatteryCharge;
    private IEnumerable<ErrorMessage>? _specificErrorMessage;
    private string _robotTitle = string.Empty;
    private string _robotTitleError = string.Empty;

    private readonly BatteryService _batteryChargeService;
    private readonly ErrorService _errorService;

    public RobotDashboard()
    {
        _robotListener = IocSetup.Instance.Container.Resolve<RobotListener>();
        _robots = _robotListener.ActiveRobots;

        _batteryChargeService = IocSetup.Instance.Container.Resolve<BatteryService>();
        _errorService = IocSetup.Instance.Container.Resolve<ErrorService>();

        PropertyChangedSubscription();
        RequestUpdatesForAllRobots();
    }

    private string GetButtonText(bool visualizePosition)
    {
        return visualizePosition ? "Hide on Map" : "Show on Map";
    }

    private void RequestUpdatesForAllRobots()
    {
        foreach (var robot in _robots)
        {
            robot.RequestStatusUpdate();
        }
    }

    private DeliveryOrderDto MakeTestDeliveryOrder2()
    {
        var orders = IocSetup.Instance.Container.Resolve<OrderService>().GetAll().ToList();
        var deliveryOrder = IocSetup.Instance.Container.Resolve<DeliveryOrderFactory>().GenerateDeliveryOrder(orders);
        var stockItems = IocSetup.Instance.Container.Resolve<StockService>().GetAll().ToList();
        return new DeliveryOrderDto(deliveryOrder, stockItems);
    }

    private void ShowBatteryChargeHistory(Robot robot)
    {
        _robotTitle = $"10 Newest BatteryCharge Entries for {robot.Name} (Id: {robot.Id})";
        _specificBatteryCharge = _batteryChargeService.GetXNewestForSpecificRobot(robot.Id, 10);
    }

    private void ShowErrorHistory(Robot robot)
    {
        _robotTitleError = $"10 Newest ErrorMessage Entries for {robot.Name} (Id: {robot.Id})";
        _specificErrorMessage = _errorService.GetXNewestForSpecificRobot(robot.Id, 10);
    }

    private void PropertyChangedSubscription()
    {
        //ugly workaround
        foreach (var robot in _robots)
        {
            robot.PropertyChanged += PropertyHasChanged;
        }
    }

    private void PropertyHasChanged(object? x, PropertyChangedEventArgs y)
    {
        //ugly workaround
        InvokeAsync(StateHasChanged);
    }

}
