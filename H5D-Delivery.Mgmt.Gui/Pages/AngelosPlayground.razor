@page "/angelosPlayground"
@using H5D_Delivery.Mgmt.Backend.Customer.Domain
@using H5D_Delivery.Mgmt.Backend.Shared.IoC
@using Autofac
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain.DeliveryOrderFactory
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain.DeliveryPlanFactory
@using H5D_Delivery.Mgmt.Backend.Order.Domain
@using H5D_Delivery.Mgmt.Backend.Order.Persistence
@using H5D_Delivery.Mgmt.Backend.Product.Domain
@using H5D_Delivery.Mgmt.Backend.Stock.Domain


<h3>Angelo's Playground</h3>
<h4>Customers</h4>
<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Name</th>
        <th>Button</th>
        <th>Checkbox</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var customer in _customers)
    {
        <tr>
            <td>@customer.Id</td>
            <td>@customer.Name</td>
            <td>
                <button class="btn btn-primary" @onclick="() => HandleButtonClick(customer)">Button</button>
            </td>
            <td>
                    <input type="checkbox" @onchange="(args) => HandleCheckBox(customer, args.Value.ToString().ToLower())" />
            </td>
        </tr>
    }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="AddCustomer">Add Customer</button>

<button class="btn btn-primary" @onclick="ShowHideDemo">Show/Hide Demo</button>
@if (_show)
{
    <p>Show/Hide Demo</p>
}

<h4>Products</h4>
<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Name</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var product in _products)
    {
        <tr>
            <td>@product.Id</td>
            <td>@product.Name</td>
        </tr>
    }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="AddProduct">Add Product</button>

<h4>Stock Items</h4>
<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Id Product</th>
        <th>Product Name</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var stockItem in _stockItems)
    {
        <tr>
            <td>@stockItem.Id</td>
            <td>@stockItem.ProductId</td>
            <td>@stockItem.Product.Name</td>
        </tr>
    }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="AddStockItem">Add StockItem</button>

<h4>Orders</h4>
<table class="table">
    <thead>
    <tr>
        <th>Id</th>
        <th>Id Product</th>
        <th>Product Name</th>
        <th>Id Customer</th>
        <th>Customer Name</th>
        <th>Amount</th>
        <th>Earliest Delivery</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var order in _orders)
    {
        <tr>
            <td>@order.Id</td>
            <td>@order.Product.Id</td>
            <td>@order.Product.Name</td>
            <td>@order.Customer.Id</td>
            <td>@order.Customer.Name</td>
            <td>@order.Amount</td>
            <td>@order.EarliestDeliveryTime</td>
        </tr>
    }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="AddOrder">Add Order</button>
<button class="btn btn-primary" @onclick="DeleteOrder">Delete Order</button>

<button class="btn btn-primary" @onclick="TestDelivery">Test Delivery</button>

<select @bind="_selectedProductId">
    <option value="">Select a product</option>
    @foreach (var product in _products)
    {
        <option value="@product.Id">@product.Name</option>
    }
</select>
<p>Selected Product Id: @_selectedProductId</p>

@code {
    private readonly CustomerService _customerService;
    private IEnumerable<Customer> _customers = new List<Customer>();

    private readonly ProductService _productService;
    private IEnumerable<Product> _products = new List<Product>();

    private readonly StockService _stockService;
    private IEnumerable<StockItem> _stockItems = new List<StockItem>();

    private readonly OrderService _orderService;
    private IEnumerable<Order> _orders = new List<Order>();

    private string _outputText = "";
    private bool _show = false;
    private List<Guid> _selectedCustomers = new List<Guid>();

    public AngelosPlayground()
    {
        var iocContainer = new IocSetup().GetContainer();
        _customerService = iocContainer.Resolve<CustomerService>();
        _productService = iocContainer.Resolve<ProductService>();
        _stockService = iocContainer.Resolve<StockService>();
        _orderService = iocContainer.Resolve<OrderService>();

        GetAllCustomers();
        GetAllProducts();
        GetAllStockItems();
        GetAllOrders();
    }

    private Guid _selectedProductId;

    public void GetAllCustomers()
    {
        var customers = _customerService.GetAll();
        if (customers != null)
        {
            _customers = customers;
        }
    }

    private void AddCustomer()
    {
        var customer = new Backend.Customer.Domain.Customer(new Guid(), "Hans", "Zbw-Strasse 4", "ich@gmail.com", "46574841");
        _customerService.Create(customer);
    }

    private void HandleButtonClick(Customer customer)
    {
        _outputText = $"Button of Id {customer.Id} was pressed.";
    }

    private void ShowHideDemo()
    {
        if (_show)
        {
            _show = false;
        }
        else
        {
            _show = true;
        }
    }

    private void HandleCheckBox(Customer customer, string? checkBoxState)
    {
        if (checkBoxState == null)
        {
            return;
        }

        if (checkBoxState == "true")
        {
            _selectedCustomers.Add(customer.Id);
        }
    }

    public void GetAllProducts()
    {
        var products = _productService.GetAll();
        if (products != null)
        {
            _products = products;
        }
    }

    private void AddProduct()
    {
        var product = new Product(new Guid(), "Messer");
        _productService.Create(product);
    }

    public void GetAllStockItems()
    {
        var stockItems = _stockService.GetAll();
        if (stockItems != null)
        {
            _stockItems = stockItems;
        }
    }

    private void AddStockItem()
    {
        var product = _productService.GetAll()?.First();
        if (product == null)
        {
            return;
        }
        var stockItem = new StockItem(new Guid(), product.Id, 10, StorageLocation.A1);
        _stockService.Create(stockItem);
    }

    public void GetAllOrders()
    {
        var orders = _orderService.GetAll();
        if (orders != null)
        {
            _orders = orders;
        }
    }

    private void AddOrder()
    {
        var product = _productService.GetAll()?.First();
        var customer = _customerService.GetAll()?.First();
        if (product == null || customer == null)
        {
            return;
        }
        var order = new Order(new Guid(), product.Id, customer.Id, 1, new DateTime(2023, 04, 14, 10, 0, 0), new DateTime(2023, 04, 14, 12, 0, 0), Priority.Normal, DeliveryType.Deposit);
        _orderService.Create(order);
    }

    private void DeleteOrder()
    {
        var order = _orderService.GetAll()?.First();
        _orderService.Delete(order.Id);
    }

    private void TestDelivery()
    {
        var deliveryService = new DeliveryService(new DeliveryOrderFactoryZbw(new DeliveryPlanFactoryZbw(new DeliveryTimerZbw(), new RouteOptimizerZbw(), new WaypointGeneratorZbw()), new OrderPrioritizerRobotInvoked()), new OrderRepository(new OrderContext()));
        deliveryService.GenerateDeliveryOrder();
    }
}
