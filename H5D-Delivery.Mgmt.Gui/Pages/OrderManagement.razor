@page "/orderManagement"
@using H5D_Delivery.Mgmt.Backend.Order.Domain
@using H5D_Delivery.Mgmt.Backend.Shared.IoC
@using Autofac
@using H5D_Delivery.Mgmt.Backend.Customer.Domain
@using H5D_Delivery.Mgmt.Backend.Product.Domain
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain.DeliveryOrderFactory
@using H5D_Delivery.Mgmt.Backend.Delivery.Domain.DeliveryPlanFactory
@using H5D_Delivery.Mgmt.Backend.Order.Domain.History
@using H5D_Delivery.Mgmt.Backend.Order.Persistence
@using H5D_Delivery.Mgmt.Backend.Stock.Domain
@using Microsoft.AspNetCore.Mvc.Formatters



<h3>Orders</h3>

<div>
    <button class="btn btn-primary" @onclick="AddOrder">Add Order</button>
   @if (isEditing)
{
    <button class="btn btn-primary" @onclick="SaveOrder">Update Order</button>
}
    @if (isEditing)
{
    <button class="btn btn-secondary" @onclick="CancelEditing">Cancel</button>
}
</div>

<!-- Produkt-Auswahlfeld -->
<div>
    <select @bind="_selectedProductId">
        <option value="">Select a product</option>
        @foreach (var product in _products)
        {
            <option value="@product.Id">@product.Name</option>
        }
    </select>
    <p>Selected Product Id: @_selectedProductId</p>
</div>

<!-- Kunden-Auswahlfeld -->
<div>
    <select @bind="_selectedCustomerId">
        <option value="">Select a customer</option>
        @foreach (var customer in _customers)
        {
            <option value="@customer.Id">@customer.Name</option>
        }
    </select>
    <p>Selected Customer Id: @_selectedCustomerId</p>
</div>

<!-- Amount-Eingabefeld -->
<div class="row">
    <div class="col-md-6">
        <label for="orderAmount">Amount</label>
        <input id="orderAmount" type="number" @bind="@orderAmount" class="form-control" />
    </div>
</div>

<!-- Earliest Delivery-Eingabefeld -->
<div class="row">
    <div class="col-md-6">
        <label for="earliestDelivery">Earliest Delivery</label>
        <input id="earliestDelivery" type="datetime-local" @bind="@earliestDelivery" class="form-control" />
    </div>
</div>

<!-- Latest Delivery-Eingabefeld -->
<div class="row">
    <div class="col-md-6">
        <label for="latestDelivery">Latest Delivery</label>
        <input id="latestDelivery" type="datetime-local" @bind="@latestDelivery" class="form-control" />
    </div>
</div>

<!-- Priority-Auswahlfeld -->
<div>
      <p>Selected Priority: @_selectedPriority</p>
    <label for="priority">Priority</label>
    <select id="priority" @bind="_selectedPriority">
        <option value="High">High</option>
        <option value="Normal">Normal</option>
        <option value="Low">Low</option>
    </select>
    </div>

<table class="table">
    <thead>
    <tr>
        <th>Id</th>
       @* <th>Id Product</th>*@
        <th>Product Name</th>
        @*<th>Id Customer</th>*@
        <th>Customer Name</th>
        <th>Amount</th>
        <th>Earliest Delivery</th>
        <th>Latest Delivery</th>
        <th>Priority</th>
        <th>Status</th> <!-- Neues Feld für Status -->
        <th>Delivery Type</th> <!-- Neues Feld für Delivery Type -->
        <th>Action</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var order in _orders)
    {
        <tr>
            <td>@order.Id</td>
           @* <td>@order.Product.Id</td>*@
            <td>@order.Product.Name</td>
           @* <td>@order.Customer.Id</td>*@
            <td>@order.Customer.Name</td>
            <td>@order.Amount</td>
            <td>@order.EarliestDeliveryTime</td>
            <td>@order.LatestDeliveryTime</td>
            <td>@order.Priority</td>
            <td>@order.Status</td> <!-- Neues Feld für Status -->
            <td>@order.DeliveryType</td> <!-- Neues Feld für Delivery Type -->
            <td>
                <button class="btn btn-primary" @onclick="() => EditOrder(order)">Edit</button> 
                <button class="btn btn-danger" @onclick="() => DeleteOrder(order)">Delete</button>
            </td>

        </tr>
    }
    </tbody>
</table>

<div class="row">
    <div class="col-md-12">
        <label id="error" class="form-control">@errorMessage</label>
    </div>
</div>

<button class="btn btn-primary" @onclick="AddOrdersForDeliveryTest">AddOrdersForDeliveryTest</button>
<p>Only use this button if there are customers at each address and 4 different products in stock</p>


@code {
    private readonly OrderService _orderService;
    private IEnumerable<Order> _orders = new List<Order>();

    private readonly ProductService _productService;
    private IEnumerable<Product> _products = new List<Product>();

    private readonly CustomerService _customerService;
    private IEnumerable<Customer> _customers = new List<Customer>();

    private string _outputText = "";
    private bool _show = false;
    private List<Guid> _selectedCustomers = new List<Guid>();

    private Guid _selectedCustomerId;
    private Guid _selectedProductId;

    private Order _selectedOrder;
    private uint orderAmount = 1;
    private DateTime earliestDelivery = DateTime.Now;
    private DateTime latestDelivery = DateTime.Now.AddMinutes(15);

    private string _selectedPriority = "Normal";
    private string errorMessage = string.Empty;

    private bool isEditing = false;

    private DeliveryType _selectedDeliveryType = DeliveryType.Deposit; // Initialer DeliveryType

    public OrderManagement()
{
    var iocContainer = IocSetup.Instance.Container;
    _customerService = iocContainer.Resolve<CustomerService>();
    _productService = iocContainer.Resolve<ProductService>();
    _orderService = iocContainer.Resolve<OrderService>();
    _products = _productService.GetAll();
    _customers = _customerService.GetAll();
    
    GetAllOrders();
}


    public void GetAllOrders()
    {
        var orders = _orderService.GetAll();
        if (orders != null)
        {
            _orders = orders;
        }
    }



    private void AddOrder()
    {
        try
        {
            var product = _products.FirstOrDefault(p => p.Id == _selectedProductId);
            var customer = _customers.FirstOrDefault(c => c.Id == _selectedCustomerId);
            if (product == null || customer == null)
            {
                return;
            }
            var priority = Enum.Parse<Priority>(_selectedPriority);
            var order = new Order(Guid.NewGuid(), product.Id, customer.Id, orderAmount, earliestDelivery, latestDelivery, priority, DeliveryType.Deposit);
            _orderService.Create(order);
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }



    private void DeleteOrder(Order order)
{
    _orderService.Delete(order.Id);
    GetAllOrders();
}


     private void EditOrder(Order order)
    {
        _selectedOrder = order;
        _selectedProductId = order.Product.Id;
        _selectedCustomerId = order.Customer.Id;
         _selectedDeliveryType = order.DeliveryType; // Delivery Type aktualisieren
        isEditing = true;
    }

   private void SaveOrder()
{
    try{ 
    if (_selectedOrder == null) return;

    var updatedProduct = _products.FirstOrDefault(p => p.Id == _selectedProductId);
    var updatedCustomer = _customers.FirstOrDefault(c => c.Id == _selectedCustomerId);

    if (updatedProduct != null && updatedCustomer != null)
    {
         _selectedOrder.Amount = orderAmount;
        _selectedOrder.ProductId = updatedProduct.Id;
        _selectedOrder.CustomerId = updatedCustomer.Id;
        _selectedOrder.EarliestDeliveryTime = earliestDelivery;
        _selectedOrder.LatestDeliveryTime = latestDelivery;
        _selectedOrder.Priority = Enum.Parse<Priority>(_selectedPriority);
        _selectedOrder.DeliveryType = DeliveryType.Deposit;
        _selectedOrder.DeliveryType = _selectedDeliveryType; // Delivery Type aktualisieren
        _orderService.Update(_selectedOrder);
        isEditing = false;
     }

    // Clear selected values
    _selectedProductId = Guid.Empty;
    _selectedCustomerId = Guid.Empty;
    _selectedPriority = "";
     _selectedDeliveryType = DeliveryType.Deposit; // Delivery Type zurücksetzen
    _selectedOrder = null;
    GetAllOrders();
     errorMessage = string.Empty;
    }
    catch (Exception ex)
    {
        errorMessage = ex.Message;
    }

}

    private void AddOrdersForDeliveryTest()
    {
        try
        {
            var stockItems = IocSetup.Instance.Container.Resolve<StockService>().GetAll()?.ToList();
            var product1 = stockItems.Find(x => x.StorageLocation == StorageLocation.A1).Product;
            var product2 = stockItems.Find(x => x.StorageLocation == StorageLocation.A2).Product;
            var product3 = stockItems.Find(x => x.StorageLocation == StorageLocation.A3).Product;
            var product4 = stockItems.Find(x => x.StorageLocation == StorageLocation.A4).Product;

            var customer1 = _customers.First(x => x.Address == "Zbw-Strasse 1");
            var customer2 = _customers.First(x => x.Address == "Zbw-Strasse 2");
            var customer3 = _customers.First(x => x.Address == "Zbw-Strasse 3");
            var customer4 = _customers.First(x => x.Address == "Zbw-Strasse 4");

            //var dateTime1 = DateTime.Now + new TimeSpan(0, 15, 0);
            //var dateTime2 = dateTime1 + new TimeSpan(0, 15, 0);
            //var dateTime3 = dateTime2 + new TimeSpan(0, 15, 0);
            //var dateTime4 = dateTime3 + new TimeSpan(0, 15, 0);

            var dateTime1 = DateTime.Now;
            var dateTime2 = DateTime.Now;
            var dateTime3 = DateTime.Now;
            var dateTime4 = DateTime.Now;

            var deliveryWindow = new TimeSpan(1, 0, 0);

            var order1 = new Order(Guid.NewGuid(), product1.Id, customer1.Id, 1, dateTime1, dateTime1 + deliveryWindow, Priority.Normal, DeliveryType.Deposit);
            var order2 = new Order(Guid.NewGuid(), product2.Id, customer2.Id, 1, dateTime2, dateTime2 + deliveryWindow, Priority.Normal, DeliveryType.HandOver);
            var order3 = new Order(Guid.NewGuid(), product3.Id, customer3.Id, 1, dateTime3, dateTime3 + deliveryWindow, Priority.Normal, DeliveryType.Deposit);
            var order4 = new Order(Guid.NewGuid(), product4.Id, customer4.Id, 1, dateTime4, dateTime4 + deliveryWindow, Priority.Normal, DeliveryType.HandOver);

            _orderService.Create(order1);
            _orderService.Create(order2);
            _orderService.Create(order3);
            _orderService.Create(order4);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private void CancelEditing()
    {
        isEditing = false;
        _selectedOrder = null;
        _selectedProductId = Guid.Empty;
        _selectedCustomerId = Guid.Empty;
        orderAmount = 1;
        earliestDelivery = DateTime.Now;
        latestDelivery = DateTime.Now.AddMinutes(15);
        _selectedPriority = "Normal";
         _selectedDeliveryType = DeliveryType.Deposit; // Delivery Type zurücksetzen
}
    }
}

